# vim: filetype=bash

alias vim="nvim"

tm() {
    # Get the current directory name
    session_name=$(basename "$PWD")

    # Check if a tmux session with the current directory name exists
    if tmux has-session -t "$session_name" 2>/dev/null; then
        # If it exists, attach to the session
        tmux attach-session -t "$session_name"
    else
        # If it doesn't exist, create a new session with that name
        tmux new-session -s "$session_name"
    fi
}

sshz_hosts() {
  echo $(cat ~/.ssh/config* | grep 'Host ' | grep -v '*' | sed 's/^Host //' | fzf)
}

sshz() {
  endpoint=$(sshz_hosts)
  echo $endpoint
  ssh $endpoint
}

sshz_install() {
  if [ -f $1 ]; then
    key=$1
    endpoint=$(sshz_hosts)

    echo $key
    echo $endpoint

    ssh-copy-id -i $key $endpoint
  else
    echo "Please specify a key file as your argument"
    return
  fi
}

sshz_install() {
  if [ -n "$1" ] && [ -f $1 ]; then
    key=$1
    endpoint=$(sshz_hosts)

    echo $key
    echo $endpoint

    ssh-copy-id -i $key $endpoint
  else
    echo "Please specify a key file as your argument"
    return
  fi
}

sshz_remove() {
  if [ -n "$1" ] && [ -f $1 ]; then
    key=$1
    endpoint=$(sshz_hosts)

    echo $key
    echo $endpoint

    KEY_ESCAPED=$(printf "$(cat $key)\n" | sed -e 's/[\/&]/\\&/g')
    echo $ESCAPED_REPLACE

    echo "BEFORE"
    ssh $endpoint "cat .ssh/authorized_keys" | sed "s/$KEY_ESCAPED//g"
    echo "HERE WE GO"
    ssh $endpoint "cat .ssh/authorized_keys" | sed "s/$KEY_ESCAPED//g"
  else
    echo "Please specify a key file as your argument"
    return
  fi
}

# Remote all branches that aren't main
git_prune() {
  # Ensure you are in a git repository
  if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    echo "Error: This is not a Git repository."
    return
  fi

  # Check if on the main branch
  current_branch=$(git branch --show-current)
  if [ "$current_branch" != "main" ]; then
    echo "Switching to the main branch..."
    git checkout main || { echo "Failed to switch to the main branch."; return; }
  fi

  # Fetch and prune remote-tracking branches
  echo "Fetching and pruning local branches..."
  git fetch --prune

  # List all local branches except 'main'
  branches_to_delete=$(git branch --list | grep -v "^\* main$" | grep -v "main$")

  if [ -z "$branches_to_delete" ]; then
    echo "No local branches to delete."
    return
  fi

  # Confirm deletion
  echo "The following local branches will be deleted:"
  echo "$branches_to_delete"
  echo -n "Are you sure? (y/N): "
  read confirmation
  if [[ "$confirmation" =~ ^[Yy]$ ]]; then
    echo "$branches_to_delete" | xargs git branch -D
    echo "Deleted the branches."
  else
    echo "Operation canceled."
  fi
}
